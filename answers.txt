Какие три основные области работы с файлами в Git (рабочая папка, индекс, репозиторий) и чем они отличаются?
Ответ:

Рабочая папка (Working Directory) — это текущая версия файлов на вашем компьютере, где вы вносите изменения.

Индекс (Staging Area) — промежуточная область, куда добавляются файлы перед коммитом. Здесь вы подготавливаете изменения, которые будут сохранены в репозитории.

Репозиторий (Repository) — хранилище Git с историей всех коммитов и версиями файлов. После коммита изменения из индекса сохраняются здесь.

Что происходит при выполнении команд git add, git commit, git push?
Ответ:

git add — добавляет изменения из рабочей папки в индекс (staging area) для подготовки к коммиту.

git commit — сохраняет изменения из индекса в локальный репозиторий, создавая новый коммит с уникальным хешем.

git push — отправляет коммиты из локального репозитория в удалённый репозиторий (например, на GitHub).

Почему важно писать информативные сообщения к коммитам, а не просто исправление или update?
Ответ: Информативные сообщения помогают понять историю изменений без просмотра кода. Они упрощают collaboration, отладку и поиск нужных коммитов. Например, сообщение Исправлена ошибка валидации email яснее, чем исправление.

Чем отличается git add имя_файла от git add .? В каких случаях лучше использовать каждый вариант?
Ответ:

git add имя_файла — добавляет в индекс только указанный файл. Полезно, когда нужно коммитить отдельные изменения.

git add . — добавляет все новые и изменённые файлы из текущей папки. Удобно для массового добавления, но может захватить лишнее.

Что показывает команда git status и как меняется ее вывод на разных этапах работы?
Ответ: git status показывает состояние рабочей папки и индекса:

Если файлы изменены, но не добавлены в индекс — они отображаются как не отслеживаемые или изменённые.

После git add файлы помечаются как готовые к коммиту.

После git commit вывод становится чистым (нет изменений).

Для чего нужна команда git remote add origin URL и что означает слово origin?
Ответ: Эта команда связывает локальный репозиторий с удалённым репозиторием по указанному URL. Origin — это стандартное имя для удалённого репозитория (можно использовать другое, но origin принято по умолчанию).

Зачем нужен флаг -u в команде git push -u origin main при первой отправке изменений?
Ответ: Флаг -u (или --set-upstream) связывает текущую локальную ветку (например, main) с удалённой веткой origin/main. После этого можно использовать git push без указания ветки, так как Git запомнит связь.

Что такое ветка (branch) по умолчанию и какая у вас создалась (main или master)? Почему это важно?
Ответ: Ветка по умолчанию — это основная ветка в репозитории, где ведётся разработка. Раньше использовалось имя master, но сейчас чаще создаётся main из-за инициатив по инклюзивности. Это важно, такую ветку обычно защищают и используют для стабильной версии проекта.

Как просмотреть историю коммитов и какую информацию о каждом коммите вы видите?
Ответ: История просматривается через git log. Для каждого коммита показывается:

Хеш (уникальный идентификатор).

Автор и дата.

Сообщение коммита.
Дополнительно можно использовать git log --oneline для компактного вывода.

Что произойдет, если сделать изменения в файле, но не выполнить git add перед git commit?
Ответ: Изменения не попадут в коммит, так как git commit сохраняет только то, что было добавлено в индекс через git add. Git предупредит, что нет изменений для коммита. 

ПР2 Ответы на вопросы:
Вопрос 1: Чем семантическая верстка отличается от несемантической и почему она важна?

Ответ: Семантическая верстка использует HTML-теги, которые несут смысловую нагрузку (<header>, <article>, <nav> и др.), тогда как несемантическая relies на <div> и <span> без конкретного значения. Она важна для:

Доступности (скринридеры понимают структуру)

SEO (поисковики лучше индексируют контент)

Поддержки кода (легче читать и изменять)

Вопрос 2: В каких случаях следует использовать <article> вместо <section>? Приведите примеры из вашей работы.

Ответ: <article> используется для самостоятельного, независимого контента, который может быть изолирован и распространяться отдельно. В моей работе:

<article>: Открытие нового тропического павильона и Весенний фестиваль тюльпанов - это законченные статьи

<section>: Программа фестиваля внутри статьи - это тематическая группировка

Вопрос 3: Для чего предназначены теги <header> и <footer> и могут ли они использоваться несколько раз на странице?

Ответ: <header> предназначен для вводного контента (заголовок, навигация), <footer> - для заключительной информации (контакты, авторские права). Да, они могут использоваться несколько раз:

Основные <header> и <footer> для всей страницы

Дополнительные внутри <article> и <section> для их заголовков и подвалов

Вопрос 4: Какой тег следует использовать для основного контента страницы и почему не стоит использовать для этого <div>?

Ответ: Для основного контента следует использовать <main>. <div> не семантичен и не передает никакой информации о структуре содержимого, тогда как <main> четко указывает на основное содержание страницы.

Вопрос 5: В чем разница между <nav> и обычным списком ссылок? Когда обязательно использовать <nav>?

Ответ: <nav> семантически обозначает основную навигацию по сайту, тогда как обычный список ссылок просто группирует ссылки без указания их назначения. <nav> обязательно использовать для основной навигации сайта (главное меню).

Вопрос 6: Для чего используется атрибут datetime в теге <time> и почему он важен?

Ответ: Атрибут datetime предоставляет машиночитаемый формат времени (ISO 8601), тогда как содержимое тега может быть человекочитаемым. Например: <time datetime=2024-03-15>15 марта 2024 года</time>. Это важно для парсинга дат поисковыми системами и скринридерами.

Вопрос 7: Какие преимущества дает использование <figure> и <figcaption> вместо простого <img> с подписью?

Ответ: Преимущества:

Семантическая связь изображения и подписи

Подпись становится доступной для скринридеров

Лучшее понимание контекста поисковыми системами

Возможность группировать несколько медиа-объектов с одной подписью

Вопрос 8: Когда следует использовать <aside> и какой контент в него помещать?

Ответ: <aside> следует использовать для контента, косвенно связанного с основным содержимым. В моей работе в <aside> помещены:

Интересные факты о растениях

Анонсы мероприятий

Форма подписки на рассылку

Вопрос 9: Как семантическая разметка влияет на SEO и доступность веб-страницы?

Ответ:

SEO: Поисковые системы лучше понимают структуру и важность контента

Доступность: Скринридеры могут правильно ориентировать пользователей, сообщая о назначении каждого раздела

Вопрос 10: Какие теги вы использовали для улучшения структуры документа и как они помогают пользователям и поисковым системам?

Ответ: Использованные семантические теги:

<header>, <main>, <footer> - определяют основную структуру

<nav> - указывает на навигацию

<article>, <section> - организуют контент

<aside> - выделяет второстепенный контент

<time> - структурирует даты

<figure>, <figcaption> - связывают изображения с подписями

Это помогает пользователям с ограниченными возможностями лучше ориентироваться на странице, а поисковым системам - точнее индексировать контент. 

ПР2 Ответы: Вопрос 1: Чем семантическая верстка отличается от несемантической и почему она важна?

Ответ: Семантическая верстка использует HTML-теги, которые несут смысловую нагрузку (<header>, <article>, <nav> и др.), тогда как несемантическая relies на <div> и <span> без конкретного значения. Она важна для:

Доступности (скринридеры понимают структуру)

SEO (поисковики лучше индексируют контент)

Поддержки кода (легче читать и изменять)

Вопрос 2: В каких случаях следует использовать <article> вместо <section>? Приведите примеры из вашей работы.

Ответ: <article> используется для самостоятельного, независимого контента, который может быть изолирован и распространяться отдельно. В моей работе:

<article>: Открытие нового тропического павильона и Весенний фестиваль тюльпанов - это законченные статьи

<section>: Программа фестиваля внутри статьи - это тематическая группировка

Вопрос 3: Для чего предназначены теги <header> и <footer> и могут ли они использоваться несколько раз на странице?

Ответ: <header> предназначен для вводного контента (заголовок, навигация), <footer> - для заключительной информации (контакты, авторские права). Да, они могут использоваться несколько раз:

Основные <header> и <footer> для всей страницы

Дополнительные внутри <article> и <section> для их заголовков и подвалов

Вопрос 4: Какой тег следует использовать для основного контента страницы и почему не стоит использовать для этого <div>?

Ответ: Для основного контента следует использовать <main>. <div> не семантичен и не передает никакой информации о структуре содержимого, тогда как <main> четко указывает на основное содержание страницы.

Вопрос 5: В чем разница между <nav> и обычным списком ссылок? Когда обязательно использовать <nav>?

Ответ: <nav> семантически обозначает основную навигацию по сайту, тогда как обычный список ссылок просто группирует ссылки без указания их назначения. <nav> обязательно использовать для основной навигации сайта (главное меню).

Вопрос 6: Для чего используется атрибут datetime в теге <time> и почему он важен?

Ответ: Атрибут datetime предоставляет машиночитаемый формат времени (ISO 8601), тогда как содержимое тега может быть человекочитаемым. Например: <time datetime=2024-03-15>15 марта 2024 года</time>. Это важно для парсинга дат поисковыми системами и скринридерами.

Вопрос 7: Какие преимущества дает использование <figure> и <figcaption> вместо простого <img> с подписью?

Ответ: Преимущества:

Семантическая связь изображения и подписи

Подпись становится доступной для скринридеров

Лучшее понимание контекста поисковыми системами

Возможность группировать несколько медиа-объектов с одной подписью

Вопрос 8: Когда следует использовать <aside> и какой контент в него помещать?

Ответ: <aside> следует использовать для контента, косвенно связанного с основным содержимым. В моей работе в <aside> помещены:

Интересные факты о растениях

Анонсы мероприятий

Форма подписки на рассылку

Вопрос 9: Как семантическая разметка влияет на SEO и доступность веб-страницы?

Ответ:

SEO: Поисковые системы лучше понимают структуру и важность контента

Доступность: Скринридеры могут правильно ориентировать пользователей, сообщая о назначении каждого раздела

Вопрос 10: Какие теги вы использовали для улучшения структуры документа и как они помогают пользователям и поисковым системам?

Ответ: Использованные семантические теги:

<header>, <main>, <footer> - определяют основную структуру

<nav> - указывает на навигацию

<article>, <section> - организуют контент

<aside> - выделяет второстепенный контент

<time> - структурирует даты

<figure>, <figcaption> - связывают изображения с подписями

Это помогает пользователям с ограниченными возможностями лучше ориентироваться на странице, а поисковым системам - точнее индексировать контент. 
 
ПР3 Ответы на вопросы: 
1. В чем разница между селектором по классу и по ID с точки зрения специфичности и возможности повторного использования?
Ответ: Селектор по ID имеет специфичность (1,0,0) и должен использоваться уникально на странице, тогда как класс имеет специфичность (0,1,0) и может многократно применяться к разным элементам.

2. Как работает каскад в CSS и в каком порядке применяются стили при конфликте правил?
Ответ: Каскад работает по принципу: 1) Важность (2) Специфичность, 3) Порядок в CSS. При конфликте побеждает правило с большей специфичностью, а при равной - последнее объявленное.

3. Рассчитайте специфичность для селекторов:
- ul li.important = (0,1,2)
- #site-title = (1,0,0)
- .content > .featured-post = (0,2,0)

4. Какие свойства в CSS наследуются по умолчанию, а какие нет?
Наследуются: color, font-family, line-height, text-align
Не наследуются: background, border, margin, padding, width

5. Как работает селектор > (дочерний селектор) и чем он отличается от селектора потомков?
Ответ: Селектор > выбирает только непосредственных детей, тогда как селектор потомков выбирает всех потомков на любом уровне вложенности.

6. Для чего используются псевдоклассы :hover и :nth-child()?
Ответ: :hover - для стилизации при наведении, :nth-child() - для выбора элементов по их порядковому номеру. Полезны для интерактивности и создания сложных паттернов.

7. Что делает правило important и почему его следует использовать с осторожностью?
Ответ: дает максимальный приоритет правилу, но усложняет поддержку кода и переопределение стилей. Лучше решать конфликты через специфичность.

8. Как псевдоэлементы ::before и ::after расширяют возможности CSS?
Ответ: Они позволяют добавлять декоративный контент без изменения HTML. Могут содержать текст, иконки, создавать сложные формы.

9. В каком порядке браузер применяет CSS-правила при одинаковой специфичности селекторов?
Ответ: Побеждает правило, объявленное последним в CSS-файле.

10. Как инструменты разработчика в браузере помогают анализировать и отлаживать CSS-код?
Ответ: Показывают примененные стили, специфичность, наследование, позволяют экспериментировать с изменениями в реальном времени, отслеживать каскад и!important правила. 
